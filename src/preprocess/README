This preprocess is for prpcessing XTF type files.

I tried a few things that are demonstrated in the test program.

I also had to modify some f the makefile system so those sources are slightly changed to build the preprocess in the build directory where you can run test.

go to build/src/preprocess and call it as:

./tests path-to-xtf-folder max-intensity row-downsample

Max-intesity is for displaying the images 
row-downsample is not actually used in the current test program as I hard code the size of the images later.

There are pauses where you need to hit enter to proceed. And sometimes you can use the up down arrows although that was a bit buggy. 

The xtf files that are in the folder will all be processed.  One file at a time is displayed as images.  They are sorted to put them in correct order.

The files are paresed into my own Sidescan Object in line 32 of test: preprocess::Sidescan sss(folder);

Then some functionality of the Sidescan object is tested in the following lines (with hardcoded numbers for the data I was using).

I show how to convert to xtf_data::xtf_sss_ping::PingsT and back.

Then there is a section that calls 'change' which basically deals with the fact that sometimes the width of the waterfall images, i.e. the number of bins per ping, changes which will mess things up as I later compute things over whole sections of the images.

We then create the three long arrays to hold the column index for the port and starboard nadir and the 'artifact' i.e. the surface reflection that appears on the port side.

Some parameter such as minintensity are hard coded in the test program but might not work so well on all data.

Then the long arrays are filled in by calling the functions:

  sss[1].removeLineArtifact(artif,minintensity,8,100,1);
  sss.findNadir(p_nadir,s_nadir, minintensity, 8, 80);

The normalization is then possible given the 'angle of the nadir' 

sss.normalize(p_nadir,s_nadir, 0, nadir_angle);

Then I even did an adjustment to uniform pixels size, i.e. the colums now move a fixed horizonal distance per pixel.

sss.regularize(roll,p_nadir,s_nadir,0.05, .85, nadir_angle);







